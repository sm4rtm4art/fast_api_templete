# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "docs/**"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "docs/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # Runner cleanup and preparation
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Free disk space
        run: |
          echo "Disk space before cleanup:"
          df -h

          # Remove unnecessary large packages
          sudo apt-get clean
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost

          # Clean Docker resources
          docker system prune -af

          echo "Disk space after cleanup:"
          df -h

  lint:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install and cache UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install ruff mypy
        shell: bash

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          uv venv
          .\.venv\Scripts\Activate.ps1
          uv pip install ruff mypy
        shell: pwsh

      - name: Fix code with Ruff (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          # Run all fixable rules at once
          ruff check --fix fast_api_template scripts
        shell: bash

      - name: Fix code with Ruff (Windows)
        if: runner.os == 'Windows'
        run: |
          .\.venv\Scripts\Activate.ps1
          # Run all fixable rules at once
          ruff check --fix fast_api_template scripts
        shell: pwsh

      - name: Check code with Ruff (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          # Use configuration from pyproject.toml
          ruff check --output-format=github fast_api_template scripts tests
        shell: bash

      - name: Check code with Ruff (Windows)
        if: runner.os == 'Windows'
        run: |
          .\.venv\Scripts\Activate.ps1
          # Use configuration from pyproject.toml
          ruff check --output-format=github fast_api_template scripts tests
        shell: pwsh

      - name: Fix formatting with Ruff (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          ruff format fast_api_template tests scripts
        shell: bash

      - name: Fix formatting with Ruff (Windows)
        if: runner.os == 'Windows'
        run: |
          .\.venv\Scripts\Activate.ps1
          ruff format fast_api_template tests scripts
        shell: pwsh

      - name: Check if formatting made changes
        run: |
          git diff --exit-code || (echo "::warning::Formatting changes were needed. Files have been formatted, but not committed." && exit 0)
        shell: bash

      - name: Run vulture for unused code (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          # Install vulture
          uv pip install vulture
          # Skip vulture in CI for now as we're using it locally via pre-commit
          echo "Skipping vulture in CI environment"
        shell: bash
        continue-on-error: true

      - name: Type check with mypy (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          # Install type stubs
          uv pip install types-python-jose types-passlib types-boto3 mypy-boto3-s3 mypy-boto3-sqs mypy-boto3-lambda mypy-boto3-rds pydantic tomli types-docker
          mypy --config-file=pyproject.toml fast_api_template
        shell: bash

      - name: Type check with mypy (Windows)
        if: runner.os == 'Windows'
        run: |
          .\.venv\Scripts\Activate.ps1
          # Install type stubs - Consider adding pyright-specific stubs if needed
          uv pip install types-python-jose types-passlib types-boto3 mypy-boto3-s3 mypy-boto3-sqs mypy-boto3-lambda mypy-boto3-rds pydantic tomli types-docker
          mypy --config-file=pyproject.toml fast_api_template
        shell: pwsh

  security:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install and cache UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install bandit safety
        shell: bash

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          uv venv
          .\.venv\Scripts\Activate.ps1
          uv pip install bandit safety
        shell: pwsh

      - name: Run bandit (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          bandit -r fast_api_template -x fast_api_template/tests
        shell: bash

      - name: Run bandit (Windows)
        if: runner.os == 'Windows'
        run: |
          .\.venv\Scripts\Activate.ps1
          bandit -r fast_api_template -x fast_api_template/tests
        shell: pwsh

      - name: Run Safety vulnerability scanner
        uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}
          args: --full-report

  test:
    needs: [lint, security]
    runs-on: ${{ matrix.os }}
    env:
      CI: "true" # Add CI environment variable to skip optional tests
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Set up proper UV caching with latest version
      - name: Install and cache UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      # Install test dependencies directly from PyPI
      - name: Install dependencies (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          uv venv
          source .venv/bin/activate
          # Install dependencies for all cloud providers to ensure tests pass
          uv pip install -e ".[test,lint,cloud,cloud-test]"
          # Install additional test dependencies for cloud modules
          uv pip install moto requests-mock docker pika minio
        shell: bash

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          uv venv
          .\.venv\Scripts\Activate.ps1
          # Install dependencies for all cloud providers to ensure tests pass
          uv pip install -e ".[test,lint,cloud,cloud-test]"
          # Install additional test dependencies for cloud modules
          uv pip install moto requests-mock docker pika minio
        shell: pwsh

      - name: Test with pytest (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          python -m pytest -v --cov=fast_api_template --cov-report=xml tests/
        shell: bash

      - name: Test with pytest (Windows)
        if: runner.os == 'Windows'
        run: |
          .\.venv\Scripts\Activate.ps1
          python -m pytest -v --cov=fast_api_template --cov-report=xml tests/
        shell: pwsh

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          name: codecov-umbrella

  docker:
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set registry and repo variables
        run: |
          echo "REPO_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build Docker image (without pushing)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false # Don't push to registry
          load: true # Load the image locally instead
          tags: |
            ${{ env.REPO_LOWER }}:latest
            ${{ env.REPO_LOWER }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  trivy:
    needs: docker
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set repository name to lowercase
        id: repo_name
        run: |
          echo "REPO_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.REPO_LOWER }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.REPO_LOWER }}:${{ github.sha }}"
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
