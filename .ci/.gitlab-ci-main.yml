stages:
  - prepare
  - lint
  - security
  - test
  - build
  - deploy

variables:
  UV_CACHE_DIR: "$CI_PROJECT_DIR/.cache/uv"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHON_VERSION: "3.12"

# Define a reusable template for UV setup
.uv-template: &uv-template
  before_script:
    - source ci/detect-ci.sh
    - python -m pip install --upgrade pip
    - pip install "uv>=0.1.30"
    - uv --version

# Prepare environment and free disk space
prepare:
  stage: prepare
  image: python:${PYTHON_VERSION}-slim
  script:
    - apt-get update
    - apt-get install -y curl
    - df -h
    - apt-get clean
    - df -h
  artifacts:
    paths:
      - ci/ci-env.sh

# Lint job
lint:
  stage: lint
  image: python:${PYTHON_VERSION}-slim
  needs:
    - prepare
  <<: *uv-template
  script:
    - uv venv
    - source .venv/bin/activate
    - uv pip install ".[lint]"
    - ruff check fast_api_template
    - ruff format --check fast_api_template tests
    - mypy --ignore-missing-imports fast_api_template
    - pyright
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - .cache/uv
      - .venv

# Security job
security:
  stage: security
  image: python:${PYTHON_VERSION}-slim
  needs:
    - prepare
  <<: *uv-template
  script:
    - uv venv
    - source .venv/bin/activate
    - uv pip install ".[security]"
    - bandit -r fast_api_template -x fast_api_template/tests
    - |
      if [ -n "$SAFETY_API_KEY" ]; then
        safety scan --non-interactive --auto-org-link
      else
        echo "SAFETY_API_KEY not found, running safety scan in basic mode"
        safety scan --api-key "" --non-interactive || true
      fi
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - .cache/uv
      - .venv

# Test job
test:
  stage: test
  image: python:${PYTHON_VERSION}-slim
  needs:
    - lint
    - security
  <<: *uv-template
  script:
    - uv venv
    - uv pip install ".[test]"
    - python -m pytest -v --cov=fast_api_template --cov-report=xml tests/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - .cache/uv
      - .venv

# Docker build job
docker:
  stage: build
  image: docker:latest
  needs:
    - test
  services:
    - docker:dind
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG -f Dockerfile .
    - docker build -t $CI_REGISTRY_IMAGE:dev-$CI_COMMIT_REF_SLUG -f Dockerfile.dev .
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

# Only for tags - release job
release:
  stage: deploy
  image: python:${PYTHON_VERSION}-slim
  needs:
    - docker
  <<: *uv-template
  script:
    - uv pip install build twine
    - python -m build
    - twine check dist/*
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
  artifacts:
    paths:
      - dist/

# Publish docker images
publish:
  stage: deploy
  image: docker:latest
  needs:
    - release
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE:latest
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
