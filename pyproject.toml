[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fast-api-template"
version = "0.1.0"
description = "A modern FastAPI project template"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.12"
authors = [
    { name = "Your Name", email = "your.email@example.com" },
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "fastapi>=0.109.0",
    "uvicorn>=0.27.0",
    "sqlmodel>=0.0.16",
    "pydantic>=2.6.0",
    "pydantic-settings>=2.1.0",
    "python-jose[cryptography]>=3.4.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.9",
    "typer>=0.9.0",
    "rich>=13.7.0",
    "psycopg2-binary>=2.9.9",    # PostgreSQL adapter
    "boto3-stubs[s3,sqs]>=1.37.18",
    "mypy-boto3-s3>=1.37.0",
    "mypy-boto3-sqs>=1.37.0",
    "types-redis>=4.6.0.20241004",
    "ecdsa>=0.19.1",
    "types-boto3>=1.37.18",
    "types-requests>=2.32.0.20250306",
]

[project.optional-dependencies]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-xdist>=3.3.1",
    "pytest-mock>=3.12.0",
    "httpx>=0.26.0",
    "coverage>=7.3.2",
    "requests-mock>=1.9.0",
    "moto>=4.0.0",  # For AWS mocking
    "docker>=6.0.0",  # For Docker-based integration tests
]

cloud-test = [
    "moto>=4.0.0",      # AWS mocking
    "requests-mock>=1.9.0",  # General HTTP API mocking
    "redis>=4.0.0",     # For Redis tests
    "pika>=1.2.0",      # For RabbitMQ tests
    "minio>=7.0.0",     # For MinIO/S3-compatible storage tests
    "docker>=6.0.0",    # For Docker-based tests
    "google-api-python-client>=2.100.0",  # For GCP API mocking
    # If/when mock-gcp is available on PyPI, it would be added here
]

lint = [
    "mypy==1.15.0",
    "vulture==2.14",
    "ruff==0.11.2",
    "types-python-jose==3.4.0.20250224",
    "types-passlib==1.7.7.20250322",
    "types-requests==2.32.0.20250306",
    "types-redis==4.6.0.20241004",
    "types-boto3==1.37.18",
    "types-docker==7.1.0.20241229",
    "boto3-stubs==1.37.18",
    "mypy-boto3-s3==1.37.0",
    "mypy-boto3-sqs==1.37.0",
]
security = [
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "tomli>=2.0.1",
]
dev = [
    "fast-api-template[test]",
    "fast-api-template[lint]",
    "fast-api-template[security]",
    "pre-commit>=3.5.0",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "gitchangelog>=3.0.4",
]
notebook = [
    "jupyterlab>=4.0.7",
    "pandas>=2.1.3",
    "matplotlib>=3.8.2",
    "seaborn>=0.13.0",
    "ipywidgets>=8.1.1",
]
aws = [
    "boto3==1.37.18",
    "botocore==1.37.18",
    "redis==5.2.1",
]
gcp = [
    "google-cloud-storage==3.1.0",
    "google-cloud-pubsub==2.29.0",
    "redis==5.2.1",
]
azure = [
    "azure-storage-blob==12.25.0",
    "azure-servicebus==7.14.1",
    "azure-identity==1.21.0",
    "azure-mgmt-redis==14.5.0",
    "redis==5.2.1",
]
cloud = [
    "fast-api-template[aws]",
    "fast-api-template[gcp]",
    "fast-api-template[azure]",
]

[project.scripts]
fast_api_template = "fast_api_template.__main__:main"

[project.urls]
"Homepage" = "https://github.com/sm4rtm4art/FAST_API_TEMPLATE"
"Bug Tracker" = "https://github.com/sm4rtm4art/FAST_API_TEMPLATE/issues"

[tool.hatch.build.targets.wheel]
packages = ["fast_api_template"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 120
indent-width = 4

# Target Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["E", "F", "I", "B", "W", "C90"]
ignore = [
    "B008",  # Do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
# Ignore B008 for FastAPI's Depends function
"**/routes/*.py" = ["B008"]
# Ignore specific issues in test files
"tests/cloud/*.py" = [
    "E501",    # Line too long - tests often have longer descriptive names
    "F401",    # Unused imports - needed for fixtures and context
    "F811",    # Redefined name - often happens with fixtures
    "E402",    # Module level import not at top of file
    "F841",    # Local variable assigned but never used - common in test mocks
    "B017",    # Do not assert blind exception - tests often need to catch any exception
]
# Ignore setattr with constant attribute value in tests (common testing pattern)
"tests/*.py" = [
    "B010",    # Do not call `setattr` with a constant attribute value
]
# Ignore line length in docstrings for cloud modules
"fast_api_template/cloud/*.py" = [
    "E501",    # Line too long - more readable to keep docstrings on one line
]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["fast_api_template"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Use double quotes for strings.
quote-style = "double"

# Indent with spaces, rather than tabs.
indent-style = "space"

# Respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, respect magic trailing commas.
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
mypy_path = "stubs"
follow_imports = "silent"
namespace_packages = true
# Add explicit package to fix import conflict issues
explicit_package_bases = true
# Exclude stub files from main check to avoid duplicate module errors
exclude = ["stubs/.*"]

[[tool.mypy.overrides]]
module = ["stubs.*"]
ignore_errors = true
follow_imports = "skip"

[[tool.mypy.overrides]]
module = ["google.cloud.*", "IPython.*", "typer", "typer.*", "typer.main", "typer.main.*", "sqlmodel.*", "rich.*", "pytest.*", "sqlalchemy.*", "fastapi.*", "fastapi.middleware.*", "fastapi.security.*", "fastapi.testclient.*", "azure.*", "mypy_boto3_s3.*", "mypy_boto3_sqs.*", "mypy_boto3_lambda.*", "mypy_boto3_rds.*", "boto3.*", "redis.*", "tomli.*", "click.*", "click.testing.*", "moto.*", "requests_mock.*", "minio.*", "googleapiclient.*", "googleapiclient.http.*", "google.*", "google.api_core.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
allow_redefinition = true
# Allow MockSettings to be used where Dynaconf is expected, and permit object return type
disable_error_code = ["arg-type", "return-value", "no-redef", "import-not-found"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --tb=short --cov=fast_api_template --cov-report=xml:coverage.xml --cov-report=term"
markers = [
    "skip_docker: marks tests that require Docker to be running (these tests are skipped by default)",
    "integration: marks tests that require integration with external services",
    "docker_integration: marks tests that use Docker containers for integration testing",
]

[dependency-groups]
dev = [
    "minio>=7.2.15",
    "pika>=1.3.2",
]

[tool.vulture]
min_confidence = 80
paths = ["fast_api_template", "tests"]
exclude = ["*/.venv/*", "*/.git/*", "*/docs/*", "*/templates/*", "*/stubs/*"]
ignore_names = ["setUp", "tearDown", "test_*"]
ignore_decorators = ["@pytest.fixture", "@pytest.mark.*", "@property"]
# The whitelist file entries in .vulture.py are intentional
make_whitelist = false
sort_by_size = true
